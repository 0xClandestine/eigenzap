// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "src/EigenZap.sol";
import "forge-std/StdCheats.sol";

stETH constant LIDO_ETH = stETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);
rETH constant ROCKET_ETH = rETH(0xae78736Cd615f374D3085123A210448E74Fc6393);
address constant LIDO_STRATEGY = 0x93c4b944D05dfe6df7645A86cd2206016c51564D;
address constant ROCKET_STRATEGY = 0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2;
RocketDepositPool constant ROCKET_DEPOSIT_POOL =
    RocketDepositPool(0xDD3f50F8A6CafbE9b31a427582963f465E745AF8);
RocketDAOProtocolSettingsDeposit constant ROCKET_DEPOSIT_SETTINGS =
    RocketDAOProtocolSettingsDeposit(0xac2245BE4C2C1E9752499Bcd34861B761d62fC27);
address constant ROCKET_NETWORK_BALANCES = 0x07FCaBCbe4ff0d80c2b1eb42855C0131b6cba2F4;
address constant ROCKET_STORAGE = 0x1d8f8f00cfa6758d7bE78336684788Fb0ee0Fa46;

StrategyManager constant EIGEN_STRATEGY_MANAGER =
    StrategyManager(0x858646372CC42E1A627fcE94aa7A7033e7CF075A);
address constant EIGEN_STRATEGY_MANAGER_IMPL = 0x5d25EEf8CfEdaA47d31fE2346726dE1c21e342Fb;
address constant EIGEN_KERNAL = 0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc;
address constant EIGEN_KERNAL_2 = 0x2b33CF282f867A7FF693A66e11B0FcC5552e4425;
address constant LIDO = 0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb;
address constant EIGEN_DELEGATION = 0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A;
address constant EIGEN_DELEGATION_IMPL = 0xf97E97649Da958d290e84E6D571c32F4b7F475e4;
address constant EIGEN_DELAYED_WITHDRAWAL_ROUTER = 0x7Fe7E9CC0F274d2435AD5d56D5fa73E47F6A23D8;
address constant EIGEN_DELAYED_WITHDRAWAL_ROUTER_IMPL = 0x44Bcb0E01CD0C5060D4Bb1A07b42580EF983E2AF;
address constant EIGEN_LAYER_PAUSER_REG = 0x0c431C66F4dE941d089625E5B423D00707977060;
address constant EIGEN_LAYER_PROXY_ADMIN = 0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444;
address constant EIGEN_POD_BEACON = 0x5a2a4F2F3C18f09179B6703e63D9eDD165909073;
address constant EIGEN_POD_MANAGER = 0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338;
address constant EIGEN_POD_MANAGER_IMPL = 0xEB86a5c40FdE917E6feC440aBbCDc80E3862e111;
address constant EMPTY_CONTRACT = 0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9;
address constant EIGEN_SLASHER = 0xD92145c07f8Ed1D392c1B88017934E301CC1c3Cd;

// Block when eigenlayer deposits are not paused, or prevented by tvl limit.
uint256 constant TEST_BLOCK = 17480206;

Vm constant hevm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

function label() {
    hevm.label(address(EIGEN_STRATEGY_MANAGER), "EIGEN_STRATEGY_MANAGER");
    hevm.label(EIGEN_STRATEGY_MANAGER_IMPL, "EIGEN_STRATEGY_MANAGER_IMPL");

    hevm.label(address(LIDO_ETH), "LIDO_ETH");
    hevm.label(address(ROCKET_ETH), "ROCKET_ETH");

    hevm.label(address(ROCKET_DEPOSIT_POOL), "ROCKET_DEPOSIT_POOL");
    hevm.label(address(ROCKET_DEPOSIT_SETTINGS), "ROCKET_DEPOSIT_SETTINGS");
    hevm.label(ROCKET_NETWORK_BALANCES, "ROCKET_NETWORK_BALANCES");
    hevm.label(ROCKET_STORAGE, "ROCKET_STORAGE");

    hevm.label(EIGEN_KERNAL, "EIGEN_KERNAL");
    hevm.label(EIGEN_KERNAL_2, "EIGEN_KERNAL_2");
    hevm.label(LIDO, "LIDO");

    hevm.label(EIGEN_DELEGATION, "EIGEN_DELEGATION");
    hevm.label(EIGEN_DELEGATION_IMPL, "EIGEN_DELEGATION_IMPL");
    hevm.label(EIGEN_DELAYED_WITHDRAWAL_ROUTER, "EIGEN_DELAYED_WITHDRAWAL_ROUTER");
    hevm.label(EIGEN_DELAYED_WITHDRAWAL_ROUTER_IMPL, "EIGEN_DELAYED_WITHDRAWAL_ROUTER_IMPL");

    hevm.label(EIGEN_LAYER_PAUSER_REG, "EIGEN_LAYER_PAUSER_REG");
    hevm.label(EIGEN_LAYER_PROXY_ADMIN, "EIGEN_LAYER_PROXY_ADMIN");
    hevm.label(EIGEN_POD_BEACON, "EIGEN_POD_BEACON");
    hevm.label(EIGEN_POD_MANAGER, "EIGEN_POD_MANAGER");
    hevm.label(EIGEN_POD_MANAGER_IMPL, "EIGEN_POD_MANAGER_IMPL");
    hevm.label(EIGEN_SLASHER, "EIGEN_SLASHER");
}
